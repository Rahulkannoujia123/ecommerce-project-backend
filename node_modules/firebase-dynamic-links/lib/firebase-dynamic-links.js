"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FirebaseDynamicLinks = void 0;
const https_1 = require("https");
class FirebaseDynamicLinks {
    /**
     * @constructor
     * @param(webApiKey) API key to authenticate your requests to the API.
     * Take note of your project `Web Api Key` from [setting page](https://console.firebase.google.com/project/_/settings/general/) of the Firebase console.
     */
    constructor(webApiKey) {
        if (webApiKey == null) {
            throw new Error('Firebase Dynamic Links: Web Api Key can not be null or undefined');
        }
        this.webApiKey = webApiKey;
    }
    /**
     * You can use this function to generate short Dynamic Links.
     * @param body read full documentation [here](https://firebase.google.com/docs/reference/dynamic-links/link-shortener#request_body)
     * @return read full documentation [here](https://firebase.google.com/docs/reference/dynamic-links/link-shortener#response_body)
     */
    createLink(body) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(body);
            const options = {
                hostname: 'firebasedynamiclinks.googleapis.com',
                path: `/v1/shortLinks?key=${this.webApiKey}`,
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            };
            return new Promise((resolve, reject) => {
                const req = https_1.request(options, (res) => {
                    const buffers = [];
                    res
                        .on('data', (chunk) => {
                        buffers.push(chunk);
                    })
                        .on('end', () => {
                        const d = Buffer.concat(buffers).toString();
                        const resBody = JSON.parse(d);
                        if (res.statusCode === 200) {
                            resolve(resBody);
                        }
                        else {
                            reject(resBody);
                        }
                    });
                });
                req.on('error', reject);
                req.write(data);
                req.end();
            });
        });
    }
    /**
     * Use the this function to get event statistics for a single Dynamic Link.
     * @param shortDynamicLink The URL-encoded short Dynamic Link for which you want to get event data. read full documentation [here](https://firebase.google.com/docs/reference/dynamic-links/analytics#http_request)
     * @param duration The number of days for which to get event data. read full documentation [here](https://firebase.google.com/docs/reference/dynamic-links/analytics#http_request)
     * @param accessToken An unexpired access token. read full documentation [here](https://firebase.google.com/docs/reference/dynamic-links/analytics#api_authorization)
     * @return read full documentation [here](https://firebase.gogle.com/docs/reference/dynamic-links/analytics#response_body)
     */
    getLinkStats(shortDynamicLink, duration, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                hostname: 'firebasedynamiclinks.googleapis.com',
                path: `/v1/${encodeURIComponent(shortDynamicLink)}/linkStats?durationDays=${duration}`,
                method: 'GET',
                headers: {
                    Authorization: `Bearer ${accessToken}`,
                },
            };
            return new Promise((resolve, reject) => {
                const req = https_1.request(options, (res) => {
                    const buffers = [];
                    res
                        .on('data', (chunk) => {
                        buffers.push(chunk);
                    })
                        .on('end', () => {
                        const d = Buffer.concat(buffers).toString();
                        const resBody = JSON.parse(d);
                        if (res.statusCode === 200) {
                            resolve(resBody);
                        }
                        else {
                            reject(resBody);
                        }
                    });
                });
                req.on('error', reject);
                req.end();
            });
        });
    }
    /**
     * @deprecated Use {@link createLink} instead
     */
    createShortLink(dynamicLinkInfo, suffix) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestBody = {
                dynamicLinkInfo,
                suffix: suffix && { option: suffix },
            };
            return this.createLink(requestBody);
        });
    }
    /**
     * @deprecated Use {@link createLink} instead
     */
    createShortLinkFromLongLink(longDynamicLink, suffix) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestBody = {
                longDynamicLink,
                suffix: suffix && { option: suffix },
            };
            return this.createLink(requestBody);
        });
    }
}
exports.FirebaseDynamicLinks = FirebaseDynamicLinks;
